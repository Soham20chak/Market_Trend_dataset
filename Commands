cd home
cd ubh01
cd hadoop-2.7.1
cd sbin
./start-dfs.sh
./start-yarn.sh
jps
hadoop fs -mkdir -p /home/ubh01/ecommercedata
hadoop fs -put /home/ubh01/Downloads/shopping_trends.csv /home/ubh01/ecommercedata


hive
hive
use default;
create table online_market(invoice_no int,stock_code string,item string,quantity int,invoice_date date,unit_price float,cust_id int,country string) row format delimited fields terminated by ',' stored as textfile location '/home/ubh01/ecommercedata/';

partitioning :
static -
create table static_partition_table(invoice_no int,stock_code string,cust_id int,item string,quantity int,invoice_date date,unit_price float) partitioned by (country string);

insert into table static_partition_table partition(country='United Kingdom') select invoice_no,stock_code,cust_id,item,quantity,invoice_date,unit_price from online_market where location='United Kingdom';

select * from static_partition_table;

dynamic -
hive> set hive.exec.dynamic.partition.mode=nonstrict;
hive> create table dynamic_partition_table(invoice_no int,stock_code string,cust_id int,item string,quantity int,invoice_date date,unit_price float) partitioned by (country string);

insert into table dynamic_partition_table partition(country) select select invoice_no,stock_code,cust_id,item,quantity,invoice_date,unit_price from online_market ;

-- Query total sales revenue by country
SELECT country, SUM(quantity * unit_price) AS total_sales_revenue
FROM dynamic_partition_table
GROUP BY country;

-- Query top selling items in a specific country
SELECT country, item, SUM(quantity) AS total_quantity_sold
FROM dynamic_partition_table
WHERE country = 'United Kingdom'
GROUP BY country, item
ORDER BY total_quantity_sold DESC;

-- Query sales trends over time for a specific country
SELECT country, DATE_TRUNC('month', invoice_date) AS month, SUM(quantity) AS total_quantity_sold
FROM dynamic_partition_table
WHERE country = 'Netherlands'
GROUP BY country, month
ORDER BY month;


bucketing - 
create table bucketing_table(invoice_no int,stock_code string,item string,quantity int,invoice_date date,unit_price float,cust_id int,country string) clustered by (unit_price) into 10 buckets stored as textfile;

insert into bucketing_table select * from online_market;

SELECT *
FROM bucketing_table
WHERE unit_price >= 100;

SELECT COUNT(*)
FROM bucketing_table
GROUP BY unit_price;

Partitioning with bucketing :-
CREATE TABLE ecommerce_partitioned_bucketed (
    invoice_no STRING,
    stockcode STRING,
    item STRING,
    quantity INT,
    invoice_date STRING,
    unit_price DOUBLE,
    customer_id STRING
)
PARTITIONED BY (country STRING)
CLUSTERED BY (unit_price) INTO 10 BUCKETS;

INSERT OVERWRITE TABLE ecommerce_partitioned_bucketed
PARTITION (country)
SELECT invoice_no, stockcode, item, quantity, invoice_date, unit_price, customer_id, country
FROM online_market;

aggregating using country and unit_price buckets
SELECT country, unit_price_bucket, SUM(quantity) AS total_quantity, SUM(quantity * unit_price) AS total_revenue
FROM (
    SELECT country, NTILE(10) OVER (PARTITION BY country ORDER BY unit_price) AS unit_price_bucket, quantity, unit_price
    FROM ecommerce_partitioned_bucketed
) t
GROUP BY country, unit_price_bucket;

Queries - 
Sales Analysis - 

-- Total sales revenue
SELECT SUM(quantity * unit_price) AS total_sales_revenue
FROM online_market;

-- Top selling items
SELECT item, SUM(quantity) AS total_quantity_sold
FROM online_market
GROUP BY item
ORDER BY total_quantity_sold DESC limit 10;

Inventory analysis -
-- Inventory turnover rate
SELECT SUM(quantity) / COUNT(DISTINCT invoice_no) AS inventory_turnover_rate
FROM online_market;

Customer analysis -
-- Customer segmentation based on purchasing behavior
SELECT cust_id, SUM(quantity) AS total_quantity_purchased
FROM online_market
GROUP BY cust_id;

-- Customer churn analysis
SELECT cust_id, COUNT(DISTINCT invoice_no) AS total_invoices
FROM online_market
GROUP BY cust_id;

Forecasting and Predictive Analytics:
-- Sales forecasting
SELECT substring(invoice_date,1,2) AS month, SUM(quantity) AS total_quantity_sold
FROM online_market
group by month;

SELECT MONTH(FROM_UNIXTIME(UNIX_TIMESTAMP('11-22-2000 8:45', 'MM-dd-yyyy HH:mm'))) AS extracted_month;



